[
  {
    "objectID": "posts/2021-01-25-built-by-docs.html",
    "href": "posts/2021-01-25-built-by-docs.html",
    "title": "Built By Docs",
    "section": "",
    "text": "Machine learning - chest xray\n\n\nLet’s get the tired truisms out of the way first, the healthcare system as we know it is broken. There are multiple problems throughout the entire system, both large and small. Resources of course - time, personnel and money - are finite. Put all of this aside for the moment. What kind of healthcare system would you design, if you were doing it from the ground up? What kind of future do you want to build? Is it Star Trek or Blade Runner?\n\n“May I never see in the patient anything but a fellow creature in pain.”\nThe Oath of Maimonides\n\nOur job in healthcare is to watch over the life and health of our patients, and by extension the public at large.\nTechnology alone cannot accomplish a solution to all the problems in our communities, to insure their health and well-being. But it can set an infrastructure for us to support the building of a better system.\nWhere do we go from here?\nWhat ingredients do we need to bake into healthcare design?\n\nInteroperability\nAccess to information, clearly displayed\nPrivacy protections\nPrice transparency\nInvolvement by clinical healthcare professionals - from the very start\n\nStart building!\n(originally published February 27, 2019 on builtbydocs.com)"
  },
  {
    "objectID": "posts/2021-11-16-code-comments.html",
    "href": "posts/2021-11-16-code-comments.html",
    "title": "Code Comments",
    "section": "",
    "text": "Be a good coding citizen, and be kind to your future self.\n\nThis is yet another in a series of posts about development infrastructure basics.\n\nSome developers feel that code should be self-commenting; that the code should speak for itself. This might be an ideal, but for mere mortals comments helps explain the code and help aid future developers, including the future you.\nStylistically, comments should be complete sentences. The first word should be capitalized, unless it is an identifier that begins with a lower case letter.\nComments should be made at the same level of indent as the code it is commenting.\nHere are the basics of comments for Python, Swift and a number of other languages.\n\n\nFor a single line code, Python ignores everything after the hash mark ‘#’ and up to the end of the line.\nInline comments occur on the same line of a statement, following the code itself. They are separated by two spaces from the statement. These begin with a hash mark and a single whitespace character.\nWhile PEP 8 https://www.python.org/dev/peps/pep-0008/#maximum-line-length advises keeping code at 79 characters or fewer per line, it suggests a max of 72 characters for inline comments and docstrings. If your comment is approaching or exceeding that length, then you’ll want to spread it out over multiple lines.\nYou can comment out a block of code by selecting the lines and pressing Ctrl+/ on PC, or Cmd+/ on Mac.\nDocstring convention https://www.python.org/dev/peps/pep-0257/\nDocstrings are documentation comments which provide documentations for functions, classes and modules. These are defined by a pair of triple quotes (“”” ), just below the function or class declaration.\nThis string will become the .__doc__ attribute of your function and will officially be associated with that specific method.\nThere are tools (e.g., pdoc https://pdoc3.github.io/pdoc and pydoc https://docs.python.org/3/library/pydoc.html) that allow you to generate documentation from the multiline docstrings in your code.\nImports (Not really about comments, but this is also good code hygiene.)  Imports should be grouped from most generic to least generic: Python standard library imports third-party module or package imports Code repository sub-package imports\nPlace a blank line between import sections. Alphabetize within each group.\nPython filenames must have a .py extension and must not contain dashes (-). You can use underscores instead.\n\n\n\nCode Comments\nCode after double slashes, //, or in between slash stars, /* */ are code comments and are ignored by the compiler.\nDocumentation Comments\nOption+Cmd+/, tells Xcode to insert a documentation comment placeholder for us. When your text cursor is above a function it will automatically add placeholders for parameters and return type.\n\n\n\nC++ uses // for single line and inline comments and the C style /* for multi line / comments. Some authors suggest ’/’\nand ’/**/’ for multi line commenting out of code, so you can then toggle the comments by deleting the initial comment characters to uncomment the lines.\n“C-style” or “multi-line” comments are /* Comment */.\n“C++-style” or “single-line” comments are // Comment.\n\n\n\nHTML comments are  for both single and multi line.\n\n\n\nCSS comments are the C-style /* */\n\n\n\nJavaScript uses the same comment style as Swift: // for single lines and: /* For multi lines */\nJSDoc comments are used to for documentation comments, as in Swift, immediately above the function call. These comments begin with /** and use tags starting with the “at” symbol, such as @constructor and @param .\n\n\n\nYAML only supports single line comments, starting with the ‘#’ sign.\n\n\n\nNope. There are no comments in json.\n\n\n\n<!--- Using 3 hyphens —->\nAlternative methods:\n[//]: # “Comment goes here.” [//]: # (Comment goes here.)\n[comment]: # (Yet another comment style.)\n\n\n\n{% comment %}\nThese lines are commented out.\n{% endcomment %}\n\n\n\nA single line comment starts with # character and they extend from # to the end of the line\nYou comment multiple lines using =begin and =end syntax. These tokens should start at the beginning of the line and be the only thing on that line.\n\n\n\nSQL comments use /* For both inline comments and multi lines. */ Single line comments start with ‘—’, a double dash.\nNow go forth and be excellent to each other (and youself)."
  },
  {
    "objectID": "posts/2020-04-11-think-globally.html",
    "href": "posts/2020-04-11-think-globally.html",
    "title": "Think globally, act locally",
    "section": "",
    "text": "This expression originated in urban planning and environmentalism, but is can be applied broadly in many disciplines including business, politics and computer science.\nI like to think it also can be viewed with regards to our conduct towards our own family and our personal inner lives.\nCharity begins at home, both in being charitable in thoughts and deeds to those closest to us, and in caring for ourselves.\nBe kind to each other, and be kind to yourself."
  },
  {
    "objectID": "posts/2020-04-30-COVID-19-datasets.html",
    "href": "posts/2020-04-30-COVID-19-datasets.html",
    "title": "COVID-19 Datasets",
    "section": "",
    "text": "Eric M. Baumel, MD\nIf you are interested in exploring the data yourself for visualization, research, educational or machine learning purposes, here are a list of sources.\n\nOpen Source Imaging Datasets (CT and X-rays)\nCOVID CT Scans\nhttp://covidctscans.org\nOpen source repository of COVID-19 CT scans, segmented 3D models, simulation models and more\n(16 cases (includes the 10 from Coronacases.org))\nKaggle : COVID-19 CT scans\nhttps://www.kaggle.com/andrewmvd/covid19-ct-scans\n(20 cases – confirmed)\nCOVID-CT-Dataset: A CT Scan Dataset about COVID-19\nhttps://github.com/UCSD-AI4H/COVID-CT\nhttps://arxiv.org/pdf/2003.13865.pdf\nCOVID-19 Radiology Dataset (chest XRay & CT) for Annotation & Collaboration\nhttps://towardsdatascience.com/covid-19-imaging-dataset-chest-xray-ct-for-annotation-collaboration-5f6e076f5f22\nCoronacases.org\nhttps://coronacases.org/forum/coronacases-org-helping-radiologists-to-help-people-in-more-than-100-countries-1\n(10 cases – confirmed)\nCOVID-19 image data collection\nhttps://github.com/ieee8023/covid-chestxray-dataset\n(Chest Xrays)\nCOVID-19 CT segmentation dataset\nhttp://medicalsegmentation.com/covid19/\nCOVID-19 CT Lung and Infection Segmentation Dataset\nhttps://zenodo.org/record/3757476#.XqivsC2z3yw\n(20 labeled CT scans taken from cornacases and Radiopedia)\n\n\nGeneral COVID-19 Radiology Information\nRadiopedia\nhttps://radiopaedia.org/articles/covid-19-3\nExcellent overview of the disease and radiologic manifestations\nRSNA Special Focus: COVID-19\nhttps://pubs.rsna.org/2019-ncov\n\n\nWHO General Health Information\nWorld Health Organization: Global research on coronavirus disease (COVID-19)\nhttps://www.who.int/emergencies/diseases/novel-coronavirus-2019/global-research-on-novel-coronavirus-2019-ncov\n\n\nEpidemiologic Datasets\nJohns Hopkins Coronavirus Resource Center\nhttps://coronavirus.jhu.edu/us-map\nJohns Hopkins Github Data Repository\nhttps://github.com/CSSEGISandData/COVID-19\nTableau COVID-19 Data Hub\nhttps://www.tableau.com/covid-19-coronavirus-data-resources\nNextstrain\nhttps://github.com/nextstrain/ncov\nGenomic epidemiology of novel coronavirus - Global subsampling\nhttps://nextstrain.org/ncov/global\nKaggle COVID-19 Open Research Dataset Challenge (CORD-19)\nhttps://www.kaggle.com/allen-institute-for-ai/CORD-19-research-challenge\n\n\nResearch papers dataset\nCORD-19 COVID-19 Open Research Dataset\nhttps://www.semanticscholar.org/cord19"
  },
  {
    "objectID": "posts/2022-01-22-jupyterlab-cheatsheet.html",
    "href": "posts/2022-01-22-jupyterlab-cheatsheet.html",
    "title": "JupyterLab Cheat Sheet",
    "section": "",
    "text": "JupyterLab is the latest iteration of the popular interactive Python notebook environment, inheriting from iPython and Jupyter Notebooks. See Project Jupyter.\nJupyterLab provides the interactive notebook format of Jupyter Notebooks, with an integrated file borwser, console and more.\nYou install JupyterLab either from Anaconda or via pip with: pip install jupyterlab.\nYou launch the JupyterLab server from the command line with jupyter lab.\nIf your browser doesn’t launch by itself, you go to http://localhost:8888/lab\nA iPython notebook file .ipynb can be opened with either Jupyter Notebok or JupyterLab.\n\n\n\n\nToggle the sidebar with Cmd + B\nSave the notebook with Cmd + S\nSave As with Shift + Cmd + S\nClose a tab with Option + W or Alt + W\n\n\n\n\n\nTo execute a cell and move tho the next cell in command mode click the run button ▸ in the toolbar or use Shift + Enter on the keyboard\nTo execute the cell and stay on that cell use Ctl + Enter\nInterupt a Running Cell with II\n\n\n\n\n\nChange to Command mode with the ESC key\nChange to the Edit mode with the Enter key\n\n\n\nMove between cells with the up ↑ and down ↓ arrow keys\n\nCreate a cell above the active cell with the A key\nCreate a cell below the active cell with the B key\nDelete the active cell with DD\nUndo a cell with the Z key\nCopy a cell with the C key\nPaste a cell with the V key\nChange to markdown mode with the M key\nChange to code mode with the Y key\n\n\n\n\n\nThe Tab key gives you a list of possible class or function choices.\nShift + Tab shows a tooltip of the fucion or class the cursor is on.\n\n\n\nAdapted from: https://www.markdownguide.org/basic-syntax/\n\n\nTo create a heading, add number signs (#) in front of a word or phrase. The number of number signs you use should correspond to the heading level.\nFor compatibility, always put a space between the number signs and the heading name. Also, put blank lines before and after a heading for compatibility.\nExample:\n# Heading 1: Document Title\n## Heading 2: A subtitle"
  },
  {
    "objectID": "posts/2022-01-22-jupyterlab-cheatsheet.html#heading-2-a-subtitle",
    "href": "posts/2022-01-22-jupyterlab-cheatsheet.html#heading-2-a-subtitle",
    "title": "JupyterLab Cheat Sheet",
    "section": "Heading 2: A subtitle",
    "text": "Heading 2: A subtitle\n\nLine Breaks\nTo create a line break or new line <br>, end a line with two or more spaces, and then type return.\nExample:\nA line break <br> here.\nA line break  here.\n\n\nText Formatting\nBold Text - **Bold Text**\nItalics Text - *Italic Text*\nBoldItalics - ***BoldItalic Text***\n\n\nCode\nTo show a word or phrase as code, enclose it in backticks (`).\nExample:\nInstall a library with, pip install jupyterlabs.\nCode blocks are normally indented four spaces or one tab. When they’re in a list, indent them eight spaces or two tabs. You can also enclose the codeblock thith three backticks (``), or three tildes~~~`.\n# Imports\nimport pandas\nimport numpy\n\n\nLinks\n[title](https://www.example.com)\n\n\nImages\n![alt text](image.jpg)\n\n\nBlockquotes\nThe Greater Than sign > offsets blockquotes.\n> Think globally, act locally. is rendered as: > Think globally, act locally.\n\n\nLists\n\nUnordered Lists\nUse a dash - for unorderd list:\n\nAn Unordered List Item - An Unordered List Item\n\nAnother List Item - Another List Item\n\n\n\n\nOrdered Lists\n\nTo create an order list, start the line with a number and a period. 1. To create an order list...\nIf you need to use a number at the start of a list item, you escape the period by adding a backslash character \\ after the number, but before the period: 2022\\. That's the year I wrote this."
  },
  {
    "objectID": "posts/2021-01-03-git-init-2021.html",
    "href": "posts/2021-01-03-git-init-2021.html",
    "title": "git init 2021",
    "section": "",
    "text": "by Eric M. Baumel"
  },
  {
    "objectID": "posts/2021-01-03-git-init-2021.html#putting-your-project-under-source-control-with-github",
    "href": "posts/2021-01-03-git-init-2021.html#putting-your-project-under-source-control-with-github",
    "title": "git init 2021",
    "section": "Putting your project under source control with GitHub",
    "text": "Putting your project under source control with GitHub\n\nThis is the first of a series of mini-posts of various computer housekeeping tips, initially for my own use. Hopefully these may also be some some benefit for others.\n\nSource control with git serves several functions: - It provides a method of keeping track of changes made to your code, so you can roll back to a previous save if needed. - If used with a remote hosting service such as GitHub, gives a convenient back up of your code in the cloud. - Allows easy collaboration with other developers. - Can be used by many providers for managing deployment.\n\nLet’s Get Started\n\nInstall git on your system, if not alread done: Git Install\nMake directory to hold project\n\n\nFor iOS development: Create Xcode Project - start with appropriate project type\n\n\nNavigate to your project folder using the command line.\nIn Terminal, put project under source control.\n  git init\nCreate a .gitignore file.\n\n\nA .gitignore file lists the files and directories you do not want under source control, such as hidden files (.DS_Store on MacOS) , environment files (.env), secure credentials, venv and test directories, etc.\n\n\nOnce you have files ready to be placed under source control, view the files that have been created or changed.\n  git status\nTrack these files so they can be commited.\n  git add .\nCommit the waiting files.\n  git commit -m “Project setup”\n\n\nOnly push commits that will build and run.\n\n\nNow that you have a local git repo on your system, get ready to save it on GitHub:\nCreate new repository on GitHub. GitHub: Create a repo\nPush your local repo to the remote main branch.\n  git remote add origin <URL>\n  git push origin main\nContinue your work in a dev branch. This becomes your HEAD branch.\n  git checkout -b <new-branch>\n\n\n\nOther Useful Git Commands\n\ngit log Shows all commits.\ngit branch -av Lists all local branches.\ngit remote -v List all remote branches.\ngit checkout <branch> Switches your HEAD branch.\ngit branch -m <new-branch> Rename your HEAD branch.\ngit branch -d <local-branch> Delete local branch.\ngit push origin --delete <remote-branch-name> Delete remote branch."
  },
  {
    "objectID": "posts/2020-10-30-probabilistic-universe.html",
    "href": "posts/2020-10-30-probabilistic-universe.html",
    "title": "Probabilistic Universe",
    "section": "",
    "text": "We live in a probabilistic universe, with the obvious exception of death. Even taxes are probability weighted.\nThere is no absolute certainty in markets or anything else in life. The outputs of all our calculations should be expressed in terms of percentages. Chance rules all. Risk is not just built into the system, it IS the system."
  },
  {
    "objectID": "posts/2021-01-04-Setting-up-virtual-environments-in-python.html",
    "href": "posts/2021-01-04-Setting-up-virtual-environments-in-python.html",
    "title": "Setting Up Virtual Environments in Python",
    "section": "",
    "text": "This is an opinionated set of instructions to set up virtual environments for each project.\n\nA virtual environement is a clean sandbox without any installed python libraries. This allows you to add the libraries you need for your project, without conflicts from packages installed for other, unrelated projects on your system. This also helps you containerize you projects so they can be deployed cleanly or shared with other developers.\nAfter several other explorations, I use venv to manage the environments for all my projects. Know that venv is not the only method of setting up virtual environments, but is the officially suggested method by the folks at python.org.\nThere are several other methods, such as using the Anaconda Navigator or conda via the command line, pipenv and pyenv.\n\n\n\nInstall Python on computer, if this isn’t already installed.\nCheck instillation of Python on a clean Terminal window with python —version (that is a double dash).\nCheck instillation of pip with pip —version.\nInstall virtualenv with pip install virtualenv.\nConfirm the instillation with virtualenv —version.\nIn your development directory of choice (ex.: the Desktop, /Dev, /Documents, etc.), create a new directory with mkdir <Project_Name>.\nNavigate to the new project directory cd <Project_Name>.\nCreate a new env environment with python -m venv venv.\nActivate with . venv/bin/activate (don’t forget the ‘dot space’). You should see (venv) before the terminal prompt, confirming that you are in the active virtual environment.\nAdd new packages with pip install SomePackage.\nUpgrade a package with pip install --upgrade SomePackage.\nAfter installing dependencies, use pip freeze > requirements.txt to list the requirements and version numbers for that project. For a clean install of all of these dependencies into another fresh environment, use pip install -r requirements.txt\n\n\nYou can view the installed dependencies with cat requirements.txt.\n\n\nDeactivate the virtual environment with deactivate venv."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Eric M. Baumel, MD",
    "section": "",
    "text": "Board-certified diagnostic radiologist, award winning app developer, medical 3D printing innovator and digital health entrepreneur\n\n\n\n\nMobile Apps:\nRadiology Toolbox Pro for iOS / Radiology Toolbox for Google Play\nWinner 2014 Minnie Award - Best Mobile Radiology App\n\n\nOther Blogs:\nTowards Data Science\nMachine Learning for Radiology — Where to Begin\nembodi3D\nDesktop 3D Printing of CT Scan Images\n3D Printing of Renal Mass from MRI Images\nThis site is built with Quarto, An easy to use blogging platform with extra features for Jupyter Notebooks.\n\n\n\n\nPosts\n\n\n\n\n\n\n\n\n\n  \n\n\n\n\nJupyterLab Cheat Sheet\n\n\n\n\n\nTips and tricks for the next stup in Project Jupyter evolution.\n\n\n\n\n\n\nJan 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode Comments\n\n\n\n\n\n\n\npython\n\n\nswift\n\n\nhtml\n\n\ndevelopment\n\n\n\n\nBe a good coding citizen, and be kind to your future self.\n\n\n\n\n\n\nNov 16, 2021\n\n\nEric M. Baumel\n\n\n\n\n\n\n  \n\n\n\n\nBuilt By Docs\n\n\n\n\n\n\n\ndigital health\n\n\n\n\nWhat kind of healthcare system would you design, if you were doing it from the ground up?\n\n\n\n\n\n\nJan 25, 2021\n\n\nEric M. Baumel\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSetting Up Virtual Environments in Python\n\n\n\n\n\n\n\npython\n\n\ndata science\n\n\ndevelopment\n\n\n\n\nA receipe for setting up a virtual environment for Python projects.\n\n\n\n\n\n\nJan 4, 2021\n\n\nEric M. Baumel\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngit init 2021\n\n\n\n\n\n\n\npython\n\n\nswift\n\n\ndata science\n\n\ndevelopment\n\n\n\n\nFirst of a series of receipes. Putting your project under source control with GitHub.\n\n\n\n\n\n\nJan 3, 2021\n\n\nEric M. Baumel\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nProbabilistic Universe\n\n\n\n\n\n\n\nmarkets\n\n\nrisk\n\n\n\n\nBetween 0.0 and 1.0.\n\n\n\n\n\n\nOct 30, 2020\n\n\nEric M. Baumel, MD\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCOVID-19 Datasets\n\n\n\n\n\n\n\nCOVID-19\n\n\ndatasets\n\n\nradiology\n\n\n\n\nA list of open source datasets for COVID-19.\n\n\n\n\n\n\nApr 30, 2020\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThink globally, act locally\n\n\n\n\n\n\n\nethics\n\n\n\n\nA good rule of thumb. My first post using markdown with fastpages.\n\n\n\n\n\n\nApr 11, 2020\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Eric M. Baumel, MD\nEric M. Baumel, MD is a board-certified diagnostic radiologist, app developer, medical 3D printing innovator and digital health entrepreneur.\nDr. Baumel has active medical licenses in CA, DC, DE, FL, MD, NJ, NY, and VA. He has extensive practice experience in all modalities of radiology, including PET/CT, digital mammography/tomosynthesis, CT and MR angiography and 3D reconstructions, as well as radiography, CT, MRI, ultrasound, and nuclear medicine.\nHe has been involved for several years with on-going clinical trials utilizing PET/CT in the diagnosis of Alzheimer’s Disease. He is on the medical advisory board of Wexma, a digital health innovations company based in Helsinki, Finland.\nDr. Baumel and his partners developed, operated and sold three full-service outpatient diagnostic centers. He spearheaded the construction of two commercial real estate projects, including a 20,000 sq. ft. two-story professional office building.\nDr. Baumel is the founder of Softcode Systems, LLC, creators of digital tools for health. He has developed three medical education/reference mobile apps available in the Apple iTunes App Store and one in the Google Play Store. His app, Radiology Toolbox Pro was awarded the 2014 Minnie Award for Best Radiology Mobile App by the leading medical imaging trade website, AuntMinnie.com.\nHe is currently developing Tap-Rx, a medication compliance and accountability app for the Apple Watch and iPhone. Eric is involved in medical 3D printing, having written two blog posts for the Embodi3D.com site on desktop medical 3D printing. He is a founding member of the RSNA 3D Printing Special Interest Group and is a member of the Augmented Reality committee.\nDr. Baumel has held leadership positions in two hospital-based radiology practices, and is currently the co-founder and medical director of Digital Imaging Diagnostics, PLC, a radiology services provider based in Wellington, FL.\n\nExternal Blog Posts\nMachine Learning:\nMachine Learning for Radiology — Where to Begin\n3D Printing:\nDesktop 3D Printing of CT Scan Images\n3D Printing of Renal Mass from MRI Images\nThis website is powered by Quarto"
  }
]