[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About Me",
    "section": "",
    "text": "Eric M. Baumel, MD\nEric M. Baumel, MD is a board-certified diagnostic radiologist, app developer, medical 3D printing innovator and digital health entrepreneur.\nDr. Baumel has active medical licenses in CA, DC, DE, MD, NJ, NY, and VA. He has extensive practice experience in all modalities of radiology, including PET/CT, digital mammography/tomosynthesis, CT and MR angiography and 3D reconstructions, as well as radiography, CT, MRI, ultrasound, and nuclear medicine.\nHe has been involved for several years with on-going clinical trials utilizing PET/CT in the diagnosis of Alzheimer’s Disease. He is on the medical advisory board of Wexma, a digital health innovations company based in Helsinki, Finland.\nDr. Baumel and his partners developed, operated and sold three full-service outpatient diagnostic centers. He spearheaded the construction of two commercial real estate projects, including a 20,000 sq. ft. two-story professional office building.\nDr. Baumel is the founder of Softcode Systems, LLC, creators of digital tools for health. He has developed three medical education/reference mobile apps available in the Apple iTunes App Store and one in the Google Play Store. His app, Radiology Toolbox Pro was awarded the 2014 Minnie Award for Best Radiology Mobile App by the leading medical imaging trade website, AuntMinnie.com.\nHe is currently developing Tap-Rx, a medication compliance and accountability app for the Apple Watch and iPhone. Eric is involved in medical 3D printing, having written two blog posts for the Embodi3D.com site on desktop medical 3D printing. He is a founding member of the RSNA 3D Printing Special Interest Group and is a member of the Augmented Reality committee.\nDr. Baumel has held leadership positions in two hospital-based radiology practices, and is currently the co-founder and medical director of Digital Imaging Diagnostics, PLC, a radiology services provider based in Wellington, FL.\n\nExternal Blog Posts\nMachine Learning:\nMachine Learning for Radiology — Where to Begin\n3D Printing:\nDesktop 3D Printing of CT Scan Images\n3D Printing of Renal Mass from MRI Images\nThis website is powered by Quarto"
  },
  {
    "objectID": "posts/2023-04-16-exploring-a-dicom-dataset.html",
    "href": "posts/2023-04-16-exploring-a-dicom-dataset.html",
    "title": "Exploring a DICOM dataset",
    "section": "",
    "text": "DICOM Introduction\nExploring a DICOM dataset\nAdapted from :\nKaggle Kernel: Getting to know DICOM and the Data by schlerp\nhttps://www.kaggle.com/schlerp/getting-to-know-dicom-and-the-data/notebook\nA Multi-platform DICOM Toolbox for Academic Radiologists by\nhttp://uwmsk.org/jupyter/Jupyter_DICOM_toolbox.html\nA Radiologist’s Exploration of the Stanford ML Group’s MRNet data by Walter Wiggins\nhttps://towardsdatascience.com/a-radiologists-exploration-of-the-stanford-ml-group-s-mrnet-data-8e2374e11bfb\n\nImports\nImport libraries and write settings here.\n\n# File handling\nimport os\nimport glob\n\n# Data manipulation\nimport pandas as pd\n\nimport numpy as np\n\n# Data visualization\nimport matplotlib\nfrom matplotlib import pyplot as plt\nfrom matplotlib import image as mpimage\n\nimport seaborn as sns\nfrom tqdm import tqdm\n\n# Date manipulation\nimport datetime\n\n# DICOM format reader\nimport pydicom\n\n\ndef show_dcm_info(ds):\n    print()\n    print(\"Filename.........: \", file_path)\n    print(\"Storage type.....: \", ds.SOPClassUID)\n    print()\n    \n    pat_name = ds.PatientName\n    display_name = pat_name.family_name + \", \" + pat_name.given_name\n    print(\"Patient name.....: \", display_name)\n    print(\"Patient ID.......: \", ds.PatientID)\n    print(\"Patient Age......: \", ds.PatientAge)\n    print(\"Patient Sex......: \", ds.PatientSex)\n    print(\"Modality.........: \", ds.Modality)\n    print(\"Body Part........: \", ds.BodyPartExamined)\n    print(\"View Position....: \", ds.ViewPosition)\n    \n    \n    if 'PixelData' in ds:\n        rows = int(ds.Rows)\n        cols = int(ds.Columns)\n        print(\"Image size.......:  {rows:d} x {cols:d}, {size:d} bytes\".format(\n            rows=rows, cols=cols, size=len(ds.PixelData)))\n        if 'PixelSpacing' in ds:\n            print(\"Pixel spacing....: \", ds.PixelSpacing)\n\n\ndef plot_pixel_array(ds, figsize=(10, 10)):\n    plt.figure(figsize=figsize)\n    plt.imshow(ds.pixel_array, cmap=plt.cm.bone)\n    plt.show()\n\n\ni = 1\nnum_to_plot = 5\npath = '../dicom/train_images/'\nfor file_name in os.listdir(path):\n    file_path = os.path.join(path, file_name)\n    ds = pydicom.dcmread(file_path)\n    show_dcm_info(ds)\n    plot_pixel_array(ds)\n    \n    if i &gt;= num_to_plot:\n        break\n        \n    i += 1\n\n\nFilename.........:  ../dicom/train_images/1.2.276.0.7230010.3.1.4.8323329.300.1517875162.258081.dcm\nStorage type.....:  1.2.840.10008.5.1.4.1.1.7\n\nPatient name.....:  88c14312-3265-4a3f-b7bb-41818107d607, \nPatient ID.......:  88c14312-3265-4a3f-b7bb-41818107d607\nPatient Age......:  58\nPatient Sex......:  F\nModality.........:  CR\nBody Part........:  CHEST\nView Position....:  AP\nImage size.......:  1024 x 1024, 154050 bytes\nPixel spacing....:  [0.139, 0.139]\n\n\n\n\n\n\n\n\n\n\nFilename.........:  ../dicom/train_images/1.2.276.0.7230010.3.1.4.8323329.304.1517875162.301989.dcm\nStorage type.....:  1.2.840.10008.5.1.4.1.1.7\n\nPatient name.....:  fa43083b-0d94-4849-a5c4-40120c380164, \nPatient ID.......:  fa43083b-0d94-4849-a5c4-40120c380164\nPatient Age......:  60\nPatient Sex......:  M\nModality.........:  CR\nBody Part........:  CHEST\nView Position....:  PA\nImage size.......:  1024 x 1024, 150238 bytes\nPixel spacing....:  [0.14300000000000002, 0.14300000000000002]\n\n\n\n\n\n\n\n\n\n\nFilename.........:  ../dicom/train_images/1.2.276.0.7230010.3.1.4.8323329.301.1517875162.280319.dcm\nStorage type.....:  1.2.840.10008.5.1.4.1.1.7\n\nPatient name.....:  97d32841-8836-4630-873c-be0b4d2e5478, \nPatient ID.......:  97d32841-8836-4630-873c-be0b4d2e5478\nPatient Age......:  50\nPatient Sex......:  F\nModality.........:  CR\nBody Part........:  CHEST\nView Position....:  PA\nImage size.......:  1024 x 1024, 159756 bytes\nPixel spacing....:  [0.14300000000000002, 0.14300000000000002]\n\n\n\n\n\n\n\n\n\n\nFilename.........:  ../dicom/train_images/1.2.276.0.7230010.3.1.4.8323329.303.1517875162.295039.dcm\nStorage type.....:  1.2.840.10008.5.1.4.1.1.7\n\nPatient name.....:  019a6d6a-4eac-4372-a1d4-fe9193826333, \nPatient ID.......:  019a6d6a-4eac-4372-a1d4-fe9193826333\nPatient Age......:  44\nPatient Sex......:  M\nModality.........:  CR\nBody Part........:  CHEST\nView Position....:  PA\nImage size.......:  1024 x 1024, 130602 bytes\nPixel spacing....:  [0.171, 0.171]\n\n\n\n\n\n\n\n\n\n\nFilename.........:  ../dicom/train_images/1.2.276.0.7230010.3.1.4.8323329.302.1517875162.286330.dcm\nStorage type.....:  1.2.840.10008.5.1.4.1.1.7\n\nPatient name.....:  e6f57005-8262-46ac-92ab-7c858e4ae126, \nPatient ID.......:  e6f57005-8262-46ac-92ab-7c858e4ae126\nPatient Age......:  74\nPatient Sex......:  M\nModality.........:  CR\nBody Part........:  CHEST\nView Position....:  PA\nImage size.......:  1024 x 1024, 136118 bytes\nPixel spacing....:  [0.171, 0.171]\n\n\n\n\n\n\n\n\n\nData in DICOM header\n\nds\n\nDataset.file_meta -------------------------------\n(0002, 0000) File Meta Information Group Length  UL: 200\n(0002, 0001) File Meta Information Version       OB: b'\\x00\\x01'\n(0002, 0002) Media Storage SOP Class UID         UI: Secondary Capture Image Storage\n(0002, 0003) Media Storage SOP Instance UID      UI: 1.2.276.0.7230010.3.1.4.8323329.302.1517875162.286330\n(0002, 0010) Transfer Syntax UID                 UI: JPEG Baseline (Process 1)\n(0002, 0012) Implementation Class UID            UI: 1.2.276.0.7230010.3.0.3.6.0\n(0002, 0013) Implementation Version Name         SH: 'OFFIS_DCMTK_360'\n-------------------------------------------------\n(0008, 0005) Specific Character Set              CS: 'ISO_IR 100'\n(0008, 0016) SOP Class UID                       UI: Secondary Capture Image Storage\n(0008, 0018) SOP Instance UID                    UI: 1.2.276.0.7230010.3.1.4.8323329.302.1517875162.286330\n(0008, 0020) Study Date                          DA: '19010101'\n(0008, 0030) Study Time                          TM: '000000.00'\n(0008, 0050) Accession Number                    SH: ''\n(0008, 0060) Modality                            CS: 'CR'\n(0008, 0064) Conversion Type                     CS: 'WSD'\n(0008, 0090) Referring Physician's Name          PN: ''\n(0008, 103e) Series Description                  LO: 'view: PA'\n(0010, 0010) Patient's Name                      PN: 'e6f57005-8262-46ac-92ab-7c858e4ae126'\n(0010, 0020) Patient ID                          LO: 'e6f57005-8262-46ac-92ab-7c858e4ae126'\n(0010, 0030) Patient's Birth Date                DA: ''\n(0010, 0040) Patient's Sex                       CS: 'M'\n(0010, 1010) Patient's Age                       AS: '74'\n(0018, 0015) Body Part Examined                  CS: 'CHEST'\n(0018, 5101) View Position                       CS: 'PA'\n(0020, 000d) Study Instance UID                  UI: 1.2.276.0.7230010.3.1.2.8323329.302.1517875162.286329\n(0020, 000e) Series Instance UID                 UI: 1.2.276.0.7230010.3.1.3.8323329.302.1517875162.286328\n(0020, 0010) Study ID                            SH: ''\n(0020, 0011) Series Number                       IS: '1'\n(0020, 0013) Instance Number                     IS: '1'\n(0020, 0020) Patient Orientation                 CS: ''\n(0028, 0002) Samples per Pixel                   US: 1\n(0028, 0004) Photometric Interpretation          CS: 'MONOCHROME2'\n(0028, 0010) Rows                                US: 1024\n(0028, 0011) Columns                             US: 1024\n(0028, 0030) Pixel Spacing                       DS: [0.171, 0.171]\n(0028, 0100) Bits Allocated                      US: 8\n(0028, 0101) Bits Stored                         US: 8\n(0028, 0102) High Bit                            US: 7\n(0028, 0103) Pixel Representation                US: 0\n(0028, 2110) Lossy Image Compression             CS: '01'\n(0028, 2114) Lossy Image Compression Method      CS: 'ISO_10918_1'\n(7fe0, 0010) Pixel Data                          OB: Array of 136118 elements\n\n\nInfo about undelying pixel data\n\nim = ds.pixel_array\nprint(type(im))\nprint(im.dtype)\nprint(im.shape)\n\n&lt;class 'numpy.ndarray'&gt;\nuint8\n(1024, 1024)\n\n\nConvert DICOM to JPG/PNG\n\nimport cv2\n\n\ndef dicom_to_jpg():\n    # Change to True to make PNG format\n    PNG = False\n    # DICOM folder path\n    folder_path = '../dicom/train_images/'\n    # Output path\n    output_path = '../dicom/converted/'\n    images_path = os.listdir(folder_path)\n    for n, image in enumerate(images_path):\n        ds = pydicom.dcmread(os.path.join(folder_path, image))\n        pixel_array_numpy = ds.pixel_array\n        if PNG == False:\n            image = image.replace('.dcm', '.jpg')\n        else:\n            image = image.replace('.dcm', '.png')\n        cv2.imwrite(os.path.join(output_path, image), pixel_array_numpy)\n        if n % 50 == 0:\n            print('{} image converted'.format(n))\n\n\ndicom_to_jpg()\n\n0 image converted\n\n\nPatient Demographics\n\n# Load functions from scikit-image library\n\nfrom skimage import exposure\nimport skimage.morphology as morp\nfrom skimage.filters import rank\n\n# For date functions\nfrom datetime import datetime\n\n\nds.dir('patient')\n\n['PatientAge',\n 'PatientBirthDate',\n 'PatientID',\n 'PatientName',\n 'PatientOrientation',\n 'PatientSex']\n\n\n\nds.PatientName\n\n'e6f57005-8262-46ac-92ab-7c858e4ae126'\n\n\n\n# Change Patient Name\n\nAKA = \"Blaine, Richard\"\nds.PatientName = AKA\nds.PatientName\n\n'Blaine, Richard'\n\n\n\n# Change DOB\n\nepoch = '19700101'\nds.PatientBirthDate = epoch\n\nds.PatientBirthDate\n\n'19700101'\n\n\n\n! python --version\n\nPython 3.9.7\n\n\n\n# Calculate patient age at time of scan\ndob = datetime.strptime(ds.PatientBirthDate, '%Y%m%d')\nstudy_date = datetime.strptime(ds.StudyDate, '%Y%m%d')\nage = (study_date - dob).days/365\n\nprint (\"Age = \", age)\n\nAge =  -69.04657534246576\n\n\n\n# Calculate current age\ndob = datetime.strptime(ds.PatientBirthDate, '%Y%m%d')\nnow = datetime.now()\ncurrent_age = (now - dob).days/365\n\nprint(\"Current age = \", current_age)\n\nCurrent age =  53.25205479452055\n\n\n\n# Change study date\n\nfictional = '20210504'\nds.StudyDate = fictional\n\nds.StudyDate\n\n'20210504'\n\n\nAnonymizing a folder of DICOM images\n\nfor filename in glob.iglob('cleft/*.DCM', recursive=True):\n    ds = pydicom.read_file(filename, force=True)\n    \n    # Obtain the name of the folder containing the DICOM files\n    foldername=os.path.basename(os.path.dirname(os.path.dirname(filename)))\n    \n    # Delete patient name, patientID, accession number and patient birthdate\n    del ds.PatientName\n    del ds.PatientID\n    del ds.AccessionNumber\n    del ds.PatientBirthDate\n    \n    pydicom.write_file(filename,ds)\n    print(filename)\n\niPython Widgets\n\nfrom ipywidgets import interactive, interact, widgets, Layout, Button, Box, Dropdown, IntSlider\nfrom IPython.display import display\n\n\n# Turn off warnings\nimport warnings\nwarnings.filterwarnings('ignore')\n\n\ndef contrast_adjust(image_name, percentile_lo, percentile_hi):\n    \n    # save optimized image array to global vaiable so that other functions can use\n    global img_rescale_interactive, image_name_global\n    \n    image_name_global = image_name\n    p_lo, p_hi = np.percentile(eval(image_name), (percentile_lo, percentile_hi))\n    \n    img_rescale = exposure.rescale_intensity(eval(image_name), in_range=(p_lo, p_hi))\n    \n    \n    img_rescale_interactive = img_rescale\n    \n    plt.figure(figsize = (6,6), dpi=100)\n    plt.imshow(img_rescale, cmap=plt.cm.gray)\n    \n    plt.show()\n\n\n# Widget to save image in differnt formats\n\nbutton_jpg = widgets.Button(description = \"Save .jpg version\")\nbutton_png = widgets.Button(description = \"Save .png version\")\nbutton_tiff = widgets.Button(description = \"Save .tiff version\")\n\nitems = [\n    button_jpg,\n    button_png,\n    button_tiff\n]\n\nbox_layout = Layout(display = 'flex',\n                   flex_flow = 'row',\n                   align_items = 'stretch'\n                   )\n\nbox = Box(children = items, layout = box_layout)\n\ndef jpg_button_clicked(b):\n    plt.imsave(image_name_global + '.jpg', img_rescale_interactive, cmap=plt.cm.gray)\n    \ndef png_button_clicked(b):\n    plt.imsave(image_name_global + '.png', img_rescale_interactive, cmap=plt.cm.gray)\n    \ndef tiff_button_clicked(b):\n    plt.imsave(image_name_global + '.tiff', img_rescale_interactive, cmap=plt.cm.gray)\n    \nbutton_jpg.on_click(jpg_button_clicked)\nbutton_png.on_click(png_button_clicked)\nbutton_tiff.on_click(tiff_button_clicked)\n\n\nw = interactive(contrast_adjust, image_name='ds.pixel_array', percentile_lo=(1,100,.5), percentile_hi=(1,100,.5))\n\ndisplay(w)\n\nbox\n\n\n\n\n\n\n\n\nimage_name_global\n\n'ds.pixel_array'\n\n\nInvert Image\n\nplt.figure(figsize = (6, 6), dpi=100)\nfigure = plt.imshow(ds.pixel_array, cmap=plt.cm.gist_yarg)\n\n\n\n\n\n\n\n\nMirror Image R &gt; L\n\nplt.imshow(np.fliplr(ds.pixel_array), cmap=plt.cm.gray)\n\n\n\n\n\n\n\n\nFlip Image\n\nplt.imshow(np.flipud(ds.pixel_array), cmap=plt.cm.gray)\n\n\n\n\n\n\n\n\nHistogram\n\nplt.hist(ds.pixel_array.flatten(), bins=64)\nplt.show()\n\nprint(\"pixel array = \", ds.pixel_array.shape)\nprint(\"minimum value = \", np.amin(ds.pixel_array)) # Find minimum value in pixel array\nprint(\"maximum value = \", np.amax(ds.pixel_array)) # Find maximum value in pixel array\n\n\n\n\n\n\n\n\npixel array =  (1024, 1024)\nminimum value =  0\nmaximum value =  248"
  },
  {
    "objectID": "posts/2020-10-30-probabilistic-universe.html",
    "href": "posts/2020-10-30-probabilistic-universe.html",
    "title": "Probabilistic Universe",
    "section": "",
    "text": "We live in a probabilistic universe, with the obvious exception of death. Even taxes are probability weighted.\nThere is no absolute certainty in markets or anything else in life. The outputs of all our calculations should be expressed in terms of percentages. Chance rules all. Risk is not just built into the system, it IS the system."
  },
  {
    "objectID": "posts/2022-01-22-jupyterlab-cheatsheet.html",
    "href": "posts/2022-01-22-jupyterlab-cheatsheet.html",
    "title": "JupyterLab Cheat Sheet",
    "section": "",
    "text": "JupyterLab is the latest iteration of the popular interactive Python notebook environment, inheriting from iPython and Jupyter Notebooks. See Project Jupyter.\nJupyterLab provides the interactive notebook format of Jupyter Notebooks, with an integrated file borwser, console and more.\nYou install JupyterLab either from Anaconda or via pip with: pip install jupyterlab.\nYou launch the JupyterLab server from the command line with jupyter lab.\nIf your browser doesn’t launch by itself, you go to http://localhost:8888/lab\nA iPython notebook file .ipynb can be opened with either Jupyter Notebok or JupyterLab.\n\n\n\n\nToggle the sidebar with Cmd + B\nSave the notebook with Cmd + S\nSave As with Shift + Cmd + S\nClose a tab with Option + W or Alt + W\n\n\n\n\n\nTo execute a cell and move tho the next cell in command mode click the run button ▸ in the toolbar or use Shift + Enter on the keyboard\nTo execute the cell and stay on that cell use Ctl + Enter\nInterupt a Running Cell with II\n\n\n\n\n\nChange to Command mode with the ESC key\nChange to the Edit mode with the Enter key\n\n\n\nMove between cells with the up ↑ and down ↓ arrow keys\n\nCreate a cell above the active cell with the A key\nCreate a cell below the active cell with the B key\nDelete the active cell with DD\nUndo a cell with the Z key\nCopy a cell with the C key\nPaste a cell with the V key\nChange to markdown mode with the M key\nChange to code mode with the Y key\n\n\n\n\n\nThe Tab key gives you a list of possible class or function choices.\nShift + Tab shows a tooltip of the fucion or class the cursor is on.\n\n\n\nAdapted from: Markdown Guide\n\n\nTo create a heading, add number signs (#) in front of a word or phrase. The number of number signs you use should correspond to the heading level.\nFor compatibility, always put a space between the number signs and the heading name. Also, put blank lines before and after a heading for compatibility.\nExample:\n# Heading 1: Document Title\n## Heading 2: A subtitle"
  },
  {
    "objectID": "posts/2022-01-22-jupyterlab-cheatsheet.html#jupyterlab-interface-shortcuts",
    "href": "posts/2022-01-22-jupyterlab-cheatsheet.html#jupyterlab-interface-shortcuts",
    "title": "JupyterLab Cheat Sheet",
    "section": "",
    "text": "Toggle the sidebar with Cmd + B\nSave the notebook with Cmd + S\nSave As with Shift + Cmd + S\nClose a tab with Option + W or Alt + W"
  },
  {
    "objectID": "posts/2022-01-22-jupyterlab-cheatsheet.html#running-a-cell",
    "href": "posts/2022-01-22-jupyterlab-cheatsheet.html#running-a-cell",
    "title": "JupyterLab Cheat Sheet",
    "section": "",
    "text": "To execute a cell and move tho the next cell in command mode click the run button ▸ in the toolbar or use Shift + Enter on the keyboard\nTo execute the cell and stay on that cell use Ctl + Enter\nInterupt a Running Cell with II"
  },
  {
    "objectID": "posts/2022-01-22-jupyterlab-cheatsheet.html#toggle-between-command-and-edit-modes",
    "href": "posts/2022-01-22-jupyterlab-cheatsheet.html#toggle-between-command-and-edit-modes",
    "title": "JupyterLab Cheat Sheet",
    "section": "",
    "text": "Change to Command mode with the ESC key\nChange to the Edit mode with the Enter key\n\n\n\nMove between cells with the up ↑ and down ↓ arrow keys\n\nCreate a cell above the active cell with the A key\nCreate a cell below the active cell with the B key\nDelete the active cell with DD\nUndo a cell with the Z key\nCopy a cell with the C key\nPaste a cell with the V key\nChange to markdown mode with the M key\nChange to code mode with the Y key"
  },
  {
    "objectID": "posts/2022-01-22-jupyterlab-cheatsheet.html#code-completion",
    "href": "posts/2022-01-22-jupyterlab-cheatsheet.html#code-completion",
    "title": "JupyterLab Cheat Sheet",
    "section": "",
    "text": "The Tab key gives you a list of possible class or function choices.\nShift + Tab shows a tooltip of the fucion or class the cursor is on."
  },
  {
    "objectID": "posts/2022-01-22-jupyterlab-cheatsheet.html#markdown-basics",
    "href": "posts/2022-01-22-jupyterlab-cheatsheet.html#markdown-basics",
    "title": "JupyterLab Cheat Sheet",
    "section": "",
    "text": "Adapted from: Markdown Guide\n\n\nTo create a heading, add number signs (#) in front of a word or phrase. The number of number signs you use should correspond to the heading level.\nFor compatibility, always put a space between the number signs and the heading name. Also, put blank lines before and after a heading for compatibility.\nExample:\n# Heading 1: Document Title\n## Heading 2: A subtitle"
  },
  {
    "objectID": "posts/2022-01-22-jupyterlab-cheatsheet.html#heading-2-a-subtitle",
    "href": "posts/2022-01-22-jupyterlab-cheatsheet.html#heading-2-a-subtitle",
    "title": "JupyterLab Cheat Sheet",
    "section": "Heading 2: A subtitle",
    "text": "Heading 2: A subtitle\n\nLine Breaks\nTo create a line break or new line &lt;br&gt;, end a line with two or more spaces, and then type return.\nExample:\nA line break &lt;br&gt; here.\nA line break  here.\n\n\nText Formatting\nBold Text - **Bold Text**\nItalics Text - *Italic Text*\nBoldItalics - ***BoldItalic Text***\n\n\nCode\nTo show a word or phrase as code, enclose it in backticks (`).\nExample:\nInstall a library with, pip install jupyterlabs.\nCode blocks are normally indented four spaces or one tab. When they’re in a list, indent them eight spaces or two tabs. You can also enclose the codeblock thith three backticks (``), or three tildes~~~`.\n# Imports\nimport pandas\nimport numpy\n\n\nLinks\n[title](https://www.example.com)\n\n\nImages\n![alt text](image.jpg)\n\n\nBlockquotes\nThe Greater Than sign &gt; offsets blockquotes.\n&gt; Think globally, act locally. is rendered as: &gt; Think globally, act locally.\n\n\nLists\n\nUnordered Lists\nUse a dash - for unorderd list:\n\nAn Unordered List Item - An Unordered List Item\n\nAnother List Item - Another List Item\n\n\n\n\nOrdered Lists\n\nTo create an order list, start the line with a number and a period. 1. To create an order list...\nIf you need to use a number at the start of a list item, you escape the period by adding a backslash character \\ after the number, but before the period: 2022\\. That's the year I wrote this."
  },
  {
    "objectID": "posts/2024-09-01-Firebase-hosting-deployment.html",
    "href": "posts/2024-09-01-Firebase-hosting-deployment.html",
    "title": "Firebase Hosting Deployment",
    "section": "",
    "text": "by Eric M. Baumel"
  },
  {
    "objectID": "posts/2024-09-01-Firebase-hosting-deployment.html#deploying-your-website-on-firebase-hosting",
    "href": "posts/2024-09-01-Firebase-hosting-deployment.html#deploying-your-website-on-firebase-hosting",
    "title": "Firebase Hosting Deployment",
    "section": "Deploying your website on Firebase Hosting",
    "text": "Deploying your website on Firebase Hosting\n\nThis is another of a series of mini-posts, mostly cheatsheets for my own use. Maybe of some value for others.\n\n\nFirebase Hosting Deployment\nUpdate the website in your text editor of choice, such as VSCode.\nOpen the Terminal and navigate to the directory containing the website.\nnpm install firebase\nfirebase init hosting\nIf you get a “Failed to get Firebase project &lt;project name&gt;. Please make sure the project exists and your account has permission to access it.” error message run\nfirebase logout\nFollowed by\nfirebase login\nFirebase will then ask you to login to your account on your browser. After authentication you will be able to log in.\nfirebase init hosting\nFirebase will ask a few setup question.\nWhat do you want to use as your public directory? public\nConfigure as a single-page app (rewrite all urls to /index.html)? No\nSet up automatic builds and deploys with GitHub? No\nIf you already have a deployment for this project, it will ask if you want to overwrite your 404.html and index.html files.\nfirebase serve\nWill setup a local test server on you computer at http://localhost:5002 where you can view your site before deployment.\nDeploy the site to the Firebase Hosting server with firebase deploy\nAfter you are done editing your deployment, don’t forget to save your changes to GitHub."
  },
  {
    "objectID": "posts/2023-04-21-software-development-is-magic.html",
    "href": "posts/2023-04-21-software-development-is-magic.html",
    "title": "Software Development is Magic",
    "section": "",
    "text": "by Eric M. Baumel\n\nSoftware Development is Magic\nDevelopers are magicians\nAsking sand to do their bidding\n\nYou speak aloud your desire (or type, or click) and it is made manifest\nThe right spell and you house lights up when it’s dark\nThe right spell and you house cools down when the outside world is hot\nThe correct spell and money moves accounts and (hopefully) makes you even more money\n\nThese are the spells that magicians have crafted so that non magicians can indirectly ask Sand to grant their desires\n\nThe magicians themselves know that you have to be very careful what you wish for\nThe Sand is a fickle genie\nA mis-cast spell can have consequences\n\nWe call objects into being by calling them by a name\nGive them inheritance, properties and abilities\n\nBut like the Sorcerer’s Apprentice, we can create magic beyond our ability to control.\n\nA little humility\nAnd an understanding that our spells can have consequences\nIs what separates a true wizard from an acolyte\n\nRemember to be careful what you wish for"
  },
  {
    "objectID": "posts/2021-11-16-code-comments.html",
    "href": "posts/2021-11-16-code-comments.html",
    "title": "Code Comments",
    "section": "",
    "text": "Be a good coding citizen, and be kind to your future self.\n\nThis is yet another in a series of posts about development infrastructure basics.\n\nSome developers feel that code should be self-commenting; that the code should speak for itself. This might be an ideal, but for mere mortals comments helps explain the code and help aid future developers, including the future you.\nStylistically, comments should be complete sentences. The first word should be capitalized, unless it is an identifier that begins with a lower case letter.\nComments should be made at the same level of indent as the code it is commenting.\nHere are the basics of comments for Python, Swift and a number of other languages.\n\n\nFor a single line code, Python ignores everything after the hash mark ‘#’ and up to the end of the line.\nInline comments occur on the same line of a statement, following the code itself. They are separated by two spaces from the statement. These begin with a hash mark and a single whitespace character.\nWhile PEP 8 https://www.python.org/dev/peps/pep-0008/#maximum-line-length advises keeping code at 79 characters or fewer per line, it suggests a max of 72 characters for inline comments and docstrings. If your comment is approaching or exceeding that length, then you’ll want to spread it out over multiple lines.\nYou can comment out a block of code by selecting the lines and pressing Ctrl+/ on PC, or Cmd+/ on Mac.\nDocstring convention https://www.python.org/dev/peps/pep-0257/\nDocstrings are documentation comments which provide documentations for functions, classes and modules. These are defined by a pair of triple quotes (“”” ), just below the function or class declaration.\nThis string will become the .__doc__ attribute of your function and will officially be associated with that specific method.\nThere are tools (e.g., pdoc https://pdoc3.github.io/pdoc and pydoc https://docs.python.org/3/library/pydoc.html) that allow you to generate documentation from the multiline docstrings in your code.\nImports (Not really about comments, but this is also good code hygiene.) Imports should be grouped from most generic to least generic: Python standard library imports third-party module or package imports Code repository sub-package imports\nPlace a blank line between import sections. Alphabetize within each group.\nPython filenames must have a .py extension and must not contain dashes (-). You can use underscores instead.\n\n\n\nCode Comments\nCode after double slashes, //, or in between slash stars, /* */ are code comments and are ignored by the compiler.\nDocumentation Comments\nOption+Cmd+/, tells Xcode to insert a documentation comment placeholder for us. When your text cursor is above a function it will automatically add placeholders for parameters and return type.\n\n\n\nC++ uses // for single line and inline comments and the C style /* for multi line / comments. Some authors suggest ’/’\nand ’/**/’ for multi line commenting out of code, so you can then toggle the comments by deleting the initial comment characters to uncomment the lines.\n“C-style” or “multi-line” comments are /* Comment */.\n“C++-style” or “single-line” comments are // Comment.\n\n\n\nHTML comments are  for both single and multi line.\n\n\n\nCSS comments are the C-style /* */\n\n\n\nJavaScript uses the same comment style as Swift: // for single lines and: /* For multi lines */\nJSDoc comments are used to for documentation comments, as in Swift, immediately above the function call. These comments begin with /** and use tags starting with the “at” symbol, such as @constructor and @param .\n\n\n\nYAML only supports single line comments, starting with the ‘#’ sign.\n\n\n\nNope. There are no comments in json.\n\n\n\n&lt;!--- Using 3 hyphens —-&gt;\nAlternative methods:\n[//]: # “Comment goes here.” [//]: # (Comment goes here.)\n[comment]: # (Yet another comment style.)\n\n\n\n{% comment %}\nThese lines are commented out.\n{% endcomment %}\n\n\n\nA single line comment starts with # character and they extend from # to the end of the line\nYou comment multiple lines using =begin and =end syntax. These tokens should start at the beginning of the line and be the only thing on that line.\n\n\n\nSQL comments use /* For both inline comments and multi lines. */ Single line comments start with ‘—’, a double dash.\nNow go forth and be excellent to each other (and youself)."
  },
  {
    "objectID": "posts/2021-11-16-code-comments.html#code-comments",
    "href": "posts/2021-11-16-code-comments.html#code-comments",
    "title": "Code Comments",
    "section": "",
    "text": "Be a good coding citizen, and be kind to your future self.\n\nThis is yet another in a series of posts about development infrastructure basics.\n\nSome developers feel that code should be self-commenting; that the code should speak for itself. This might be an ideal, but for mere mortals comments helps explain the code and help aid future developers, including the future you.\nStylistically, comments should be complete sentences. The first word should be capitalized, unless it is an identifier that begins with a lower case letter.\nComments should be made at the same level of indent as the code it is commenting.\nHere are the basics of comments for Python, Swift and a number of other languages.\n\n\nFor a single line code, Python ignores everything after the hash mark ‘#’ and up to the end of the line.\nInline comments occur on the same line of a statement, following the code itself. They are separated by two spaces from the statement. These begin with a hash mark and a single whitespace character.\nWhile PEP 8 https://www.python.org/dev/peps/pep-0008/#maximum-line-length advises keeping code at 79 characters or fewer per line, it suggests a max of 72 characters for inline comments and docstrings. If your comment is approaching or exceeding that length, then you’ll want to spread it out over multiple lines.\nYou can comment out a block of code by selecting the lines and pressing Ctrl+/ on PC, or Cmd+/ on Mac.\nDocstring convention https://www.python.org/dev/peps/pep-0257/\nDocstrings are documentation comments which provide documentations for functions, classes and modules. These are defined by a pair of triple quotes (“”” ), just below the function or class declaration.\nThis string will become the .__doc__ attribute of your function and will officially be associated with that specific method.\nThere are tools (e.g., pdoc https://pdoc3.github.io/pdoc and pydoc https://docs.python.org/3/library/pydoc.html) that allow you to generate documentation from the multiline docstrings in your code.\nImports (Not really about comments, but this is also good code hygiene.) Imports should be grouped from most generic to least generic: Python standard library imports third-party module or package imports Code repository sub-package imports\nPlace a blank line between import sections. Alphabetize within each group.\nPython filenames must have a .py extension and must not contain dashes (-). You can use underscores instead.\n\n\n\nCode Comments\nCode after double slashes, //, or in between slash stars, /* */ are code comments and are ignored by the compiler.\nDocumentation Comments\nOption+Cmd+/, tells Xcode to insert a documentation comment placeholder for us. When your text cursor is above a function it will automatically add placeholders for parameters and return type.\n\n\n\nC++ uses // for single line and inline comments and the C style /* for multi line / comments. Some authors suggest ’/’\nand ’/**/’ for multi line commenting out of code, so you can then toggle the comments by deleting the initial comment characters to uncomment the lines.\n“C-style” or “multi-line” comments are /* Comment */.\n“C++-style” or “single-line” comments are // Comment.\n\n\n\nHTML comments are  for both single and multi line.\n\n\n\nCSS comments are the C-style /* */\n\n\n\nJavaScript uses the same comment style as Swift: // for single lines and: /* For multi lines */\nJSDoc comments are used to for documentation comments, as in Swift, immediately above the function call. These comments begin with /** and use tags starting with the “at” symbol, such as @constructor and @param .\n\n\n\nYAML only supports single line comments, starting with the ‘#’ sign.\n\n\n\nNope. There are no comments in json.\n\n\n\n&lt;!--- Using 3 hyphens —-&gt;\nAlternative methods:\n[//]: # “Comment goes here.” [//]: # (Comment goes here.)\n[comment]: # (Yet another comment style.)\n\n\n\n{% comment %}\nThese lines are commented out.\n{% endcomment %}\n\n\n\nA single line comment starts with # character and they extend from # to the end of the line\nYou comment multiple lines using =begin and =end syntax. These tokens should start at the beginning of the line and be the only thing on that line.\n\n\n\nSQL comments use /* For both inline comments and multi lines. */ Single line comments start with ‘—’, a double dash.\nNow go forth and be excellent to each other (and youself)."
  },
  {
    "objectID": "posts/2021-01-25-built-by-docs.html",
    "href": "posts/2021-01-25-built-by-docs.html",
    "title": "Built By Docs",
    "section": "",
    "text": "Machine learning - chest xray\n\n\nLet’s get the tired truisms out of the way first, the healthcare system as we know it is broken. There are multiple problems throughout the entire system, both large and small. Resources of course - time, personnel and money - are finite. Put all of this aside for the moment. What kind of healthcare system would you design, if you were doing it from the ground up? What kind of future do you want to build? Is it Star Trek or Blade Runner?\n\n“May I never see in the patient anything but a fellow creature in pain.”\nThe Oath of Maimonides\n\nOur job in healthcare is to watch over the life and health of our patients, and by extension the public at large.\nTechnology alone cannot accomplish a solution to all the problems in our communities, to insure their health and well-being. But it can set an infrastructure for us to support the building of a better system.\nWhere do we go from here?\nWhat ingredients do we need to bake into healthcare design?\n\nInteroperability\nAccess to information, clearly displayed\nPrivacy protections\nPrice transparency\nInvolvement by clinical healthcare professionals - from the very start\n\nStart building!\n(originally published February 27, 2019 on builtbydocs.com)"
  },
  {
    "objectID": "posts/2021-01-25-built-by-docs.html#because-the-future-doesnt-invent-itself",
    "href": "posts/2021-01-25-built-by-docs.html#because-the-future-doesnt-invent-itself",
    "title": "Built By Docs",
    "section": "",
    "text": "Machine learning - chest xray\n\n\nLet’s get the tired truisms out of the way first, the healthcare system as we know it is broken. There are multiple problems throughout the entire system, both large and small. Resources of course - time, personnel and money - are finite. Put all of this aside for the moment. What kind of healthcare system would you design, if you were doing it from the ground up? What kind of future do you want to build? Is it Star Trek or Blade Runner?\n\n“May I never see in the patient anything but a fellow creature in pain.”\nThe Oath of Maimonides\n\nOur job in healthcare is to watch over the life and health of our patients, and by extension the public at large.\nTechnology alone cannot accomplish a solution to all the problems in our communities, to insure their health and well-being. But it can set an infrastructure for us to support the building of a better system.\nWhere do we go from here?\nWhat ingredients do we need to bake into healthcare design?\n\nInteroperability\nAccess to information, clearly displayed\nPrivacy protections\nPrice transparency\nInvolvement by clinical healthcare professionals - from the very start\n\nStart building!\n(originally published February 27, 2019 on builtbydocs.com)"
  },
  {
    "objectID": "posts/2020-04-11-think-globally.html",
    "href": "posts/2020-04-11-think-globally.html",
    "title": "Think globally, act locally",
    "section": "",
    "text": "This expression originated in urban planning and environmentalism, but is can be applied broadly in many disciplines including business, politics and computer science.\nI like to think it also can be viewed with regards to our conduct towards our own family and our personal inner lives.\nCharity begins at home, both in being charitable in thoughts and deeds to those closest to us, and in caring for ourselves.\nBe kind to each other, and be kind to yourself."
  },
  {
    "objectID": "posts/2024-09-09-publish-github-pages-blog-with-quarto.html",
    "href": "posts/2024-09-09-publish-github-pages-blog-with-quarto.html",
    "title": "Publishing a GitHub Pages Blog with Quarto",
    "section": "",
    "text": "This is another of a series of mini-posts, mostly cheatsheets for my own use. Maybe of some value for others.\n\nInspired by the fastpages blogs\nnbdev and Quarto an End-To-End Walkthrough\nFrom Christian Wittmann - How I created this Blog\nInstall the Quarto extension for VS Code.\nYou can preview on your local system with\nquarto preview &lt;full/path/file.name&gt; --no-browser --no-watch-inputs\nWhen you run\nquarto publish gh-pages\nyour blog posts are rendered, and the rendered versions are pushed to git in branch gh-pages\nTo backup your local copy of the unrendered files, save to the git main branch. For details see the GitHub cheatsheet, git init 2021\n[Markdown Cheat Sheet(]https://www.markdownguide.org/cheat-sheet/)"
  },
  {
    "objectID": "posts/2024-09-09-publish-github-pages-blog-with-quarto.html#github-pages-blog-with-quarto",
    "href": "posts/2024-09-09-publish-github-pages-blog-with-quarto.html#github-pages-blog-with-quarto",
    "title": "Publishing a GitHub Pages Blog with Quarto",
    "section": "",
    "text": "This is another of a series of mini-posts, mostly cheatsheets for my own use. Maybe of some value for others.\n\nInspired by the fastpages blogs\nnbdev and Quarto an End-To-End Walkthrough\nFrom Christian Wittmann - How I created this Blog\nInstall the Quarto extension for VS Code.\nYou can preview on your local system with\nquarto preview &lt;full/path/file.name&gt; --no-browser --no-watch-inputs\nWhen you run\nquarto publish gh-pages\nyour blog posts are rendered, and the rendered versions are pushed to git in branch gh-pages\nTo backup your local copy of the unrendered files, save to the git main branch. For details see the GitHub cheatsheet, git init 2021\n[Markdown Cheat Sheet(]https://www.markdownguide.org/cheat-sheet/)"
  },
  {
    "objectID": "posts/2020-04-30-COVID-19-datasets.html",
    "href": "posts/2020-04-30-COVID-19-datasets.html",
    "title": "COVID-19 Datasets",
    "section": "",
    "text": "Eric M. Baumel, MD\nIf you are interested in exploring the data yourself for visualization, research, educational or machine learning purposes, here are a list of sources.\n\nOpen Source Imaging Datasets (CT and X-rays)\nCOVID CT Scans\nhttp://covidctscans.org\nOpen source repository of COVID-19 CT scans, segmented 3D models, simulation models and more\n(16 cases (includes the 10 from Coronacases.org))\nKaggle : COVID-19 CT scans\nhttps://www.kaggle.com/andrewmvd/covid19-ct-scans\n(20 cases – confirmed)\nCOVID-CT-Dataset: A CT Scan Dataset about COVID-19\nhttps://github.com/UCSD-AI4H/COVID-CT\nhttps://arxiv.org/pdf/2003.13865.pdf\nCOVID-19 Radiology Dataset (chest XRay & CT) for Annotation & Collaboration\nhttps://towardsdatascience.com/covid-19-imaging-dataset-chest-xray-ct-for-annotation-collaboration-5f6e076f5f22\nCoronacases.org\nhttps://coronacases.org/forum/coronacases-org-helping-radiologists-to-help-people-in-more-than-100-countries-1\n(10 cases – confirmed)\nCOVID-19 image data collection\nhttps://github.com/ieee8023/covid-chestxray-dataset\n(Chest Xrays)\nCOVID-19 CT segmentation dataset\nhttp://medicalsegmentation.com/covid19/\nCOVID-19 CT Lung and Infection Segmentation Dataset\nhttps://zenodo.org/record/3757476#.XqivsC2z3yw\n(20 labeled CT scans taken from cornacases and Radiopedia)\n\n\nGeneral COVID-19 Radiology Information\nRadiopedia\nhttps://radiopaedia.org/articles/covid-19-3\nExcellent overview of the disease and radiologic manifestations\nRSNA Special Focus: COVID-19\nhttps://pubs.rsna.org/2019-ncov\n\n\nWHO General Health Information\nWorld Health Organization: Global research on coronavirus disease (COVID-19)\nhttps://www.who.int/emergencies/diseases/novel-coronavirus-2019/global-research-on-novel-coronavirus-2019-ncov\n\n\nEpidemiologic Datasets\nJohns Hopkins Coronavirus Resource Center\nhttps://coronavirus.jhu.edu/us-map\nJohns Hopkins Github Data Repository\nhttps://github.com/CSSEGISandData/COVID-19\nTableau COVID-19 Data Hub\nhttps://www.tableau.com/covid-19-coronavirus-data-resources\nNextstrain\nhttps://github.com/nextstrain/ncov\nGenomic epidemiology of novel coronavirus - Global subsampling\nhttps://nextstrain.org/ncov/global\nKaggle COVID-19 Open Research Dataset Challenge (CORD-19)\nhttps://www.kaggle.com/allen-institute-for-ai/CORD-19-research-challenge\n\n\nResearch papers dataset\nCORD-19 COVID-19 Open Research Dataset\nhttps://www.semanticscholar.org/cord19"
  },
  {
    "objectID": "posts/2021-01-03-git-init-2021.html",
    "href": "posts/2021-01-03-git-init-2021.html",
    "title": "git init 2021",
    "section": "",
    "text": "by Eric M. Baumel"
  },
  {
    "objectID": "posts/2021-01-03-git-init-2021.html#putting-your-project-under-source-control-with-github",
    "href": "posts/2021-01-03-git-init-2021.html#putting-your-project-under-source-control-with-github",
    "title": "git init 2021",
    "section": "Putting your project under source control with GitHub",
    "text": "Putting your project under source control with GitHub\n\nThis is the first of a series of mini-posts of various computer housekeeping tips, initially for my own use. Hopefully these may also be some some benefit for others.\n\nSource control with git serves several functions: - It provides a method of keeping track of changes made to your code, so you can roll back to a previous save if needed. - If used with a remote hosting service such as GitHub, gives a convenient back up of your code in the cloud. - Allows easy collaboration with other developers. - Can be used by many providers for managing deployment.\n\nLet’s Get Started\n\nInstall git on your system, if not alread done: Git Install\nMake directory to hold project\n\n\nFor iOS development: Create Xcode Project - start with appropriate project type\n\n\nNavigate to your project folder using the command line.\nIn Terminal, put project under source control.\n  git init\nCreate a .gitignore file.\n\n\nA .gitignore file lists the files and directories you do not want under source control, such as hidden files (.DS_Store on MacOS) , environment files (.env), secure credentials, venv and test directories, etc.\n\n\nOnce you have files ready to be placed under source control, view the files that have been created or changed.\n  git status\nTrack these files so they can be commited.\n  git add .\nCommit the waiting files.\n  git commit -m “Project setup”\n\n\nOnly push commits that will build and run.\n\n\nNow that you have a local git repo on your system, get ready to save it on GitHub:\nCreate new repository on GitHub. GitHub: Create a repo\nPush your local repo to the remote main branch.\n  git remote add origin &lt;URL&gt;\n  git push origin main\nContinue your work in a dev branch. This becomes your HEAD branch.\n  git checkout -b &lt;new-branch&gt;\n\n\n\nOther Useful Git Commands\n\ngit log Shows all commits.\ngit branch -av Lists all local branches.\ngit remote -v List all remote branches.\ngit checkout &lt;branch&gt; Switches your HEAD branch.\ngit branch -m &lt;new-branch&gt; Rename your HEAD branch.\ngit branch -d &lt;local-branch&gt; Delete local branch.\ngit push origin --delete &lt;remote-branch-name&gt; Delete remote branch."
  },
  {
    "objectID": "posts/2021-01-04-Setting-up-virtual-environments-in-python.html",
    "href": "posts/2021-01-04-Setting-up-virtual-environments-in-python.html",
    "title": "Setting Up Virtual Environments in Python",
    "section": "",
    "text": "This is an opinionated set of instructions to set up virtual environments for each project.\n\nA virtual environement is a clean sandbox without any installed python libraries. This allows you to add the libraries you need for your project, without conflicts from packages installed for other, unrelated projects on your system. This also helps you containerize you projects so they can be deployed cleanly or shared with other developers.\nAfter several other explorations, I use venv to manage the environments for all my projects. Know that venv is not the only method of setting up virtual environments, but is the officially suggested method by the folks at python.org.\nThere are several other methods, such as using the Anaconda Navigator or conda via the command line, pipenv and pyenv.\n\n\n\nInstall Python on computer, if this isn’t already installed.\nCheck instillation of Python on a clean Terminal window with python —version (that is a double dash).\nCheck instillation of pip with pip —version.\nInstall virtualenv with pip install virtualenv.\nConfirm the instillation with virtualenv —version.\nIn your development directory of choice (ex.: the Desktop, /Dev, /Documents, etc.), create a new directory with mkdir &lt;Project_Name&gt;.\nNavigate to the new project directory cd &lt;Project_Name&gt;.\nCreate a new env environment with python -m venv venv.\nActivate with . venv/bin/activate (don’t forget the ‘dot space’). You should see (venv) before the terminal prompt, confirming that you are in the active virtual environment.\nAdd new packages with pip install SomePackage.\nUpgrade a package with pip install --upgrade SomePackage.\nAfter installing dependencies, use pip freeze &gt; requirements.txt to list the requirements and version numbers for that project. For a clean install of all of these dependencies into another fresh environment, use pip install -r requirements.txt\n\n\nYou can view the installed dependencies with cat requirements.txt.\n\n\nDeactivate the virtual environment with deactivate venv."
  },
  {
    "objectID": "posts/2021-01-04-Setting-up-virtual-environments-in-python.html#a-clean-well-lighted-place",
    "href": "posts/2021-01-04-Setting-up-virtual-environments-in-python.html#a-clean-well-lighted-place",
    "title": "Setting Up Virtual Environments in Python",
    "section": "",
    "text": "This is an opinionated set of instructions to set up virtual environments for each project.\n\nA virtual environement is a clean sandbox without any installed python libraries. This allows you to add the libraries you need for your project, without conflicts from packages installed for other, unrelated projects on your system. This also helps you containerize you projects so they can be deployed cleanly or shared with other developers.\nAfter several other explorations, I use venv to manage the environments for all my projects. Know that venv is not the only method of setting up virtual environments, but is the officially suggested method by the folks at python.org.\nThere are several other methods, such as using the Anaconda Navigator or conda via the command line, pipenv and pyenv.\n\n\n\nInstall Python on computer, if this isn’t already installed.\nCheck instillation of Python on a clean Terminal window with python —version (that is a double dash).\nCheck instillation of pip with pip —version.\nInstall virtualenv with pip install virtualenv.\nConfirm the instillation with virtualenv —version.\nIn your development directory of choice (ex.: the Desktop, /Dev, /Documents, etc.), create a new directory with mkdir &lt;Project_Name&gt;.\nNavigate to the new project directory cd &lt;Project_Name&gt;.\nCreate a new env environment with python -m venv venv.\nActivate with . venv/bin/activate (don’t forget the ‘dot space’). You should see (venv) before the terminal prompt, confirming that you are in the active virtual environment.\nAdd new packages with pip install SomePackage.\nUpgrade a package with pip install --upgrade SomePackage.\nAfter installing dependencies, use pip freeze &gt; requirements.txt to list the requirements and version numbers for that project. For a clean install of all of these dependencies into another fresh environment, use pip install -r requirements.txt\n\n\nYou can view the installed dependencies with cat requirements.txt.\n\n\nDeactivate the virtual environment with deactivate venv."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Eric M. Baumel, MD",
    "section": "",
    "text": "Board-certified diagnostic radiologist, award winning app developer, medical 3D printing innovator and digital health entrepreneur\n\n\n\n\nMobile App:\nRadiology Toolbox Pro for iOS /\nWinner 2014 Minnie Award - Best Mobile Radiology App\n\n\nYouTube Channel\nCoding4Docs\n\n\nOther Blogs:\nTowards Data Science\nMachine Learning for Radiology — Where to Begin\nembodi3D\nDesktop 3D Printing of CT Scan Images\n3D Printing of Renal Mass from MRI Images\nThis site is built with Quarto, An easy to use blogging platform with extra features for Jupyter Notebooks.\n\n\n\n\nPosts\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPublishing a GitHub Pages Blog with Quarto\n\n\n\n\n\n\nhtml\n\n\ndevelopment\n\n\n\nAdding to you GitHub Pages blog ith Jupyter Notebooks or Markdown generated HTML à la Fastpages using Quarto.\n\n\n\n\n\nSep 9, 2024\n\n\nEric M. Baumel\n\n\n\n\n\n\n\n\n\n\n\n\nFirebase Hosting Deployment\n\n\n\n\n\n\nhtml\n\n\ndevelopment\n\n\n\nA receipe for deploying your website to Firebase Hosting.\n\n\n\n\n\nSep 1, 2024\n\n\nEric M. Baumel\n\n\n\n\n\n\n\n\n\n\n\n\nSoftware Development is Magic\n\n\n\n\n\n\ndevelopment\n\n\n\nDevelopers as Wizards with GitHub.\n\n\n\n\n\nApr 21, 2023\n\n\nEric M. Baumel\n\n\n\n\n\n\n\n\n\n\n\n\nExploring a DICOM dataset\n\n\n\n\n\n\npython\n\n\ndevelopment\n\n\nDICOM\n\n\n\nTips and tricks for the next stup in Project Jupyter evolution.\n\n\n\n\n\nApr 16, 2023\n\n\nEric M. Baumel\n\n\n\n\n\n\n\n\n\n\n\n\nJupyterLab Cheat Sheet\n\n\n\n\n\nTips and tricks for the next stup in Project Jupyter evolution.\n\n\n\n\n\nJan 22, 2022\n\n\n\n\n\n\n\n\n\n\n\n\nCode Comments\n\n\n\n\n\n\npython\n\n\nswift\n\n\nhtml\n\n\ndevelopment\n\n\n\nBe a good coding citizen, and be kind to your future self.\n\n\n\n\n\nNov 16, 2021\n\n\nEric M. Baumel\n\n\n\n\n\n\n\n\n\n\n\n\nBuilt By Docs\n\n\n\n\n\n\ndigital health\n\n\n\nWhat kind of healthcare system would you design, if you were doing it from the ground up?\n\n\n\n\n\nJan 25, 2021\n\n\nEric M. Baumel\n\n\n\n\n\n\n\n\n\n\n\n\nSetting Up Virtual Environments in Python\n\n\n\n\n\n\npython\n\n\ndata science\n\n\ndevelopment\n\n\n\nA receipe for setting up a virtual environment for Python projects.\n\n\n\n\n\nJan 4, 2021\n\n\nEric M. Baumel\n\n\n\n\n\n\n\n\n\n\n\n\ngit init 2021\n\n\n\n\n\n\npython\n\n\nswift\n\n\ndata science\n\n\ndevelopment\n\n\n\nFirst of a series of receipes. Putting your project under source control with GitHub.\n\n\n\n\n\nJan 3, 2021\n\n\nEric M. Baumel\n\n\n\n\n\n\n\n\n\n\n\n\nProbabilistic Universe\n\n\n\n\n\n\nmarkets\n\n\nrisk\n\n\n\nBetween 0.0 and 1.0.\n\n\n\n\n\nOct 30, 2020\n\n\nEric M. Baumel, MD\n\n\n\n\n\n\n\n\n\n\n\n\nCOVID-19 Datasets\n\n\n\n\n\n\nCOVID-19\n\n\ndatasets\n\n\nradiology\n\n\n\nA list of open source datasets for COVID-19.\n\n\n\n\n\nApr 30, 2020\n\n\n\n\n\n\n\n\n\n\n\n\nThink globally, act locally\n\n\n\n\n\n\nethics\n\n\n\nA good rule of thumb. My first post using markdown with fastpages.\n\n\n\n\n\nApr 11, 2020\n\n\n\n\n\n\nNo matching items"
  }
]